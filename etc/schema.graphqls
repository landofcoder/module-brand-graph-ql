
type Query {

    lofBrandById (
            brand_id: Int @doc(description: "Query by id.")
    ) : Brand @resolver( class: "Lof\\BrandGraphQl\\Model\\Resolver\\Brand") @doc(description: "Query by Get brand by id.")

    lofBrandByProduct(
        product_id: Int @doc(description: "Product Id."),
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: BrandFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
       ):Brands @resolver(class: "\\Lof\\BrandGraphQl\\Model\\Resolver\\BrandsByProduct") @doc(description: "The brands query searches for brands that match the criteria specified in the search and filter attributes")

    lofBrandList(
            search: String @doc(description: "Performs a full-text search using the specified key words."),
            filter: BrandFilterInput @doc(description: "Identifies which product attributes to search for and return."),
            pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
            currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
           ):Brands @resolver(class: "\\Lof\\BrandGraphQl\\Model\\Resolver\\Brands") @doc(description: "The brands product query searches for brands that match the criteria specified in the search and filter attributes")
}

type Brand {
    brand_id  : Int  @doc(description: "Brand id.")
    name  : String  @doc(description: "Brand Name.")
    url_key  : String  @doc(description: "Url Key.")
    description  : String  @doc(description: "Description.")
    group_id  : Int  @doc(description: "Group Id.")
    image  : String  @doc(description: "Image.")
    thumbnail  : String  @doc(description: "Thumbnail.")
    page_title  : String  @doc(description: "Page Title.")
    meta_keywords  : String  @doc(description: "Meta Keywords.")
    meta_description  : String  @doc(description: "Meta Description.")
    creation_time  : String  @doc(description: "Creation Time.")
    update_time  : String  @doc(description: "Update Time.")
    page_layout  : String  @doc(description: "Page Layout.")
    layout_update_xml  : String  @doc(description: "Layout Update XML.")
    status  : Int  @doc(description: "Status.")
    featured  : Int  @doc(description: "Featured.")
    position  : Int  @doc(description: "Position.")
    products  : [Product]  @doc(description: "Products.")
    store_id  : [Int]  @doc(description: "Stores.")
}

type Brands {
    total_count: Int @doc(description: "The number of brands returned")
    items: [Brand] @doc(description: "An array of brands that match the specified search criteria")
}

type Product {
    brand_id  : Int  @doc(description: "Brand Id.")
    product_id  : Int  @doc(description: "Product Id.")
    position  : Int  @doc(description: "Position.")
}

type Store {
    store_id: Int @doc(description: "Store Id")
}

input BrandFilterInput {
    brand_id: FilterTypeInput @doc(description: "Brand ID")
    name: FilterTypeInput @doc(description: "Name")
    status: FilterTypeInput @doc(description: "Status")
    group_id: FilterTypeInput @doc(description: "Group ID")
    or: BrandFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}
